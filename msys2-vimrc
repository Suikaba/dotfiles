
if !1 | finish | endif

set fileencoding=utf-8
set fileencodings=utf-8,cp932,euc-jp

set fileformats=unix,dos,mac

set ignorecase
set smartcase

set nobackup

set tabstop=4 shiftwidth=4 softtabstop=4
set expandtab
set autoindent
set backspace=indent,eol,start
set wrapscan
set showmatch
set wildmenu
set formatoptions+=mM

set whichwrap +=h
set whichwrap +=l

set ruler
set wrap
set laststatus=2
set cmdheight=2
set showcmd
set title

set display=lastline 
set pumheight=10

set autoread

let g:mapleader = ","

noremap \ ,

nnoremap Y y$


"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('~/.cache/dein')
  call dein#begin(expand('~/.cache/dein'))

  " Let dein manage dein
  " Required:
  call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')

  " Add or remove your plugins here:
  call dein#add('Shougo/unite.vim')
  call dein#add('Shougo/neocomplete.vim')
  call dein#add('Shougo/neosnippet')
  call dein#add('Shougo/neosnippet-snippets')
  call dein#add('Shougo/vimfiler.vim')
  call dein#add('Shougo/neomru.vim')
  call dein#add('Shougo/vimproc.vim', {'build': 'make'})

  call dein#add('altercation/vim-colors-solarized')
  call dein#add('vim-jp/cpp-vim')
  call dein#add('kana/vim-smartinput')
  call dein#add('itchyny/lightline.vim')
  call dein#add('w0ng/vim-hybrid')
  call dein#add('cocopon/lightline-hybrid.vim')
  call dein#add('tpope/vim-surround')
  call dein#add('rust-lang/rust.vim')
  call dein#add('racer-rust/vim-racer')
  call dein#add('lervag/vimtex')
  call dein#add('thinca/vim-quickrun')

  " You can specify revision/branch/tag.
  call dein#add('Shougo/vimshell', { 'rev': '3787e5' })

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------



filetype plugin indent on
filetype indent on
syntax on
syntax enable


""
""
""
noremap j gj
noremap k gk


""
"" include path
""
"augroup cpp-path
"    autocmd!
"    autocmd FileType cpp setlocal path=.,"C:/MinGW/mingw32/lib/gcc/mingw32/4.8.1/include/c++"
"augroup END


""
"" unite
""
let g:unite_enable_start_insert=0
noremap <C-P> :Unite buffer<CR>
noremap <C-N> :Unite -buffer-name=file file<CR>
noremap <C-Z> :Unite file_mru<CR>

nnoremap <silent> <C-f> :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
inoremap <silent> <C-f> <ESC>:<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> <C-b> :<C-u>Unite buffer file_mru<CR>
inoremap <silent> <C-b> <ESC>:<C-u>Unite buffer file_mru<CR>

au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>


""
"" vimfiler
""
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_safe_mode_by_default = 0

nnoremap <silent> <Leader>fe :<C-u>VimFilerBuffer -quit<CR>
nnoremap <silent> <Leader>fi :<C-u>VimFilerBufferDir -split -simple -winwidth=25 -no-quit<CR>


""
"" smartinput
""
call smartinput#map_to_trigger('i', '<BS>', '<BS>', '<BS>')
call smartinput#define_rule({
    \ 'at'    : '(\%#)',
    \ 'char'  : '<BS>',
    \ 'input' : '<Del><BS>',
    \ })

call smartinput#define_rule({
    \ 'at'    : '{\%#}',
    \ 'char'  : '<BS>',
    \ 'input' : '<Del><BS>',
    \ })

call smartinput#define_rule({
    \ 'at'    : '\[\%#\]',
    \ 'char'  : '<BS>',
    \ 'input' : '<Del><BS>',
    \ })

call smartinput#define_rule({
    \ 'at'       : '<\%#>',
    \ 'char'     : '<BS>',
    \ 'input'    : '<Del><BS>',
    \ 'filetype' : ['cpp'],
    \ })

call smartinput#map_to_trigger('i', '*', '*', '*')
call smartinput#define_rule({
    \ 'at'       : '\/\%#',
    \ 'char'     : '*',
    \ 'input'    : '**/<Left><Left>',
    \ 'filetype' : ['c', 'cpp'],
    \ })

call smartinput#define_rule({
    \ 'at'       : '\%(\<struct\>\|\<class\>\|\<enum\>\)\s*\w\+.*\%#',
    \ 'char'     : '{',
    \ 'input'    : '{};<Left><Left>',
    \ 'filetype' : ['cpp'],
    \ })

call smartinput#map_to_trigger('i', '<', '<', '<')
call smartinput#define_rule({
    \ 'at'       : '\<template\>\s*\%#',
    \ 'char'     : '<',
    \ 'input'    : '<><Left>',
    \ 'filetype' : ['cpp'],
    \ })
call smartinput#define_rule({
    \ 'at'       : '<\%#>',
    \ 'char'     : '<BS>',
    \ 'input'    : '<Del><BS>',
    \ 'filetype' : ['cpp'],
    \ })

set background=dark
let g:hybrid_use_Xresources = 1
colorscheme hybrid
set t_Co=256

""
"" VimShell
""
"nnoremap <silent><Leader>vs :<C-u>VimShell -split-command=vsplit<CR>
"nnoremap <silent><Leader>vc :<C-u>VimShellSendString<Space>
"let g:vimshell_user_prompt = 'getcwd()'

""
"" vim-latex
""
"let g:tex_flavor='latex'
let g:vimtex_enabled=0
